package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotorEx;
//look up DcMotorEx.setVelocityPIDFCoefficents();
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;

import java.util.Date;
import java.util.List;
// simple autonomous program that drives bot forward 2 seconds then ends.


// below is the Annotation that registers this OpMode with the FtcRobotController app.
// @Autonomous classifies the OpMode as autonomous, name is the OpMode title and the
// optional group places the OpMode into the Exercises group.
// uncomment the @Disable annotation to remove the OpMode from the OpMode list.

@Autonomous(name = "autonomouslolxD", group = "Exercises")
public class autonomouslolxD extends LinearOpMode {
    private DcMotor leftFrontDrive = null;
    private DcMotor rightFrontDrive = null;
    private DcMotor leftBackDrive = null;
    private DcMotor rightBackDrive = null;
    private Servo wobblerServo = null;
    private DcMotor armMotor = null;
    private DcMotorEx launchMotor = null;
    private DcMotor intakeMotor = null;
    private Servo launchServo = null;
//    private DcMotor intake = null;
//    private DcMotor outtake = null;
    private int numberOfRings;
    private static final String TFOD_MODEL_ASSET = "UltimateGoal.tflite";
    private static final String LABEL_FIRST_ELEMENT = "Quad";
    private static final String LABEL_SECOND_ELEMENT = "Single";

    /*
     * IMPORTANT: You need to obtain your own license key to use Vuforia. The string below with which
     * 'parameters.vuforiaLicenseKey' is initialized is for illustration only, and will not function.
     * A Vuforia 'Development' license key, can be obtained free of charge from the Vuforia developer
     * web site at https://developer.vuforia.com/license-manager.
     *
     * Vuforia license keys are always 380 characters long, and look as if they contain mostly
     * random data. As an example, here is a example of a fragment of a valid key:
     *      ... yIgIzTqZ4mWjk9wd3cZO9T1axEqzuhxoGlfOOI2dRzKS4T0hQ8kT ...
     * Once you've obtained a license key, copy the string from the Vuforia web site
     * and paste it in to your code on the next line, between the double quotes.
     */
    private static final String VUFORIA_KEY =
            "AWz6j8L/////AAABmRKkIryTuktLi2mFvZqqaeBDZF67S0ewoDJGMGD7nMiS/el/YAB4BDMhHU9CLQpwfj9cEEkSYB9pZgtsyWTg9q+koX/OUS9w1fDUD2O/ZgUHqvquZ3DgZe+HpsRa3ZcFslOjrqxWO/A7tEYFSJi0OZYLKVD9duT6zYq2OUiT4NJbESkRJvEk0HKmOzIwW395Ujv1uVVxgfaEdIDp4RdMhdI7Fl+ZZ+yKbnoDSnVw/UZHKSg6S/2ZclKQTPZpBmR7wJJp0y4CoSjZZhaukcNSCvsUB6Glr6WajtHP5qDooeWVjmsGi6RRol4h/QlV2sFrLv4ueJS6DPAnOn7oZ9CCeWYavv9cLTYvi6tDB6MuTOsm";

    /**
     * {@link #vuforia} is the variable we will use to store our instance of the Vuforia
     * localization engine.
     */
    private VuforiaLocalizer vuforia;

    /**
     * {@link #tfod} is the variable we will use to store our instance of the TensorFlow Object
     * Detection engine.
     */
    private TFObjectDetector tfod;
    // called when init button is  pressed.

    @Override
    public void runOpMode() throws InterruptedException {
        leftFrontDrive = hardwareMap.get(DcMotor.class, "leftFrontMotor");  // motor 2
        rightFrontDrive = hardwareMap.get(DcMotor.class, "rightFrontMotor"); // motor 3
        leftBackDrive = hardwareMap.get(DcMotor.class, "leftBackMotor"); // motor 0
        rightBackDrive = hardwareMap.get(DcMotor.class, "rightBackMotor"); // motor 1
        armMotor = hardwareMap.get(DcMotor.class, "armMotor");
        launchMotor = hardwareMap.get(DcMotorEx.class, "launchMotor");
        wobblerServo = hardwareMap.get(Servo.class, "wobblerServo");
        launchServo = hardwareMap.get(Servo.class, "launchServo");
        intakeMotor = hardwareMap.get(DcMotor.class, "intakeMotor");
//        intake = hardwareMap.get(DcMotor.class, "intake"); // motor 1
//        outtake = hardwareMap.get(DcMotor.class, "outtake"); // motor 1

        leftFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        rightFrontDrive.setDirection(DcMotor.Direction.FORWARD);
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        rightBackDrive.setDirection(DcMotor.Direction.FORWARD);
//        intake.setDirection(DcMotor.Direction.FORWARD);
//        outtake.setDirection(DcMotor.Direction.REVERSE);

        stopAndResetEncoder();
        runUsingEncoder();
        wobblerServo.setPosition(0.2);
        launchServo.setPosition(0.65);
        initVuforia();
        initTfod();

        /**
         * Activate TensorFlow Object Detection before we wait for the start command.
         * Do it here so that the Camera Stream window will have the TensorFlow annotations visible.
         **/
        if (tfod != null) {
            tfod.activate();

            // The TensorFlow software will scale the input images from the camera to a lower resolution.
            // This can result in lower detection accuracy at longer distances (> 55cm or 22").
            // If your target is at distance greater than 50 cm (20") you can adjust the magnification value
            // to artificially zoom in to the center of image.  For best results, the "aspectRatio" argument
            // should be set to the value of the images used to create the TensorFlow Object Detection model
            // (typically 16/9).
            tfod.setZoom(2.5, 16.0 / 9.0);
        }

        telemetry.addData("Mode", "waiting");
        telemetry.update();

        // wait for start button.

        waitForStart();

        telemetry.addData("Mode", "running");
        telemetry.update();


        // set both motors to 25% power
        numberOfRings = lookToFindRings();

        //look to find rings
            if (numberOfRings == 0)
            {
                encoderBack(0.2, 1400);
                sleep(500);
                encoderTurn(0.2, -1, 100,100);
                launchMotor.setVelocity(-2800);
                sleep(1500);
                intakeMotor.setPower(-0.5);
                launchServo.setPosition(-0.50);
                sleep(500);
                launchServo.setPosition(0.5);
                sleep(500);
                launchServo.setPosition(-0.50);
                sleep(500);
                launchServo.setPosition(0.5);
                sleep(500);
                launchServo.setPosition(-0.50);
                sleep(500);
                launchServo.setPosition(0.5);
                sleep(25);
                launchMotor.setVelocity(0);
                encoderTurn(0.2, -1, 700,700);
                sleep(100);
                encoderForward(0.2,300);
                sleep(100);
                armMotor.setPower(-0.8);
                sleep(1000);
                encoderStrafe(0.3,1,300);
                sleep(2000);
                wobblerServo.setPosition(1);

            }
        if (numberOfRings == 1)
        {
            encoderBack(0.2, 375);
            sleep(300);
            encoderTurn(0.2, 1, 235, 235);
            sleep(300 );
            encoderBack(0.2, 620);
            sleep(300);
            encoderTurn(0.2, -1, 300, 300);
            sleep(300);
            encoderBack(0.2, 155);
            sleep(300);
            encoderTurn(0.2, -1, 180, 180);
            sleep(300);
            launchMotor.setVelocity(-2500);
            sleep(1000);
            intakeMotor.setPower(-0.5);
            launchServo.setPosition(-0.50);
            sleep(350);
            launchServo.setPosition(0.5);
            sleep(300);
            launchServo.setPosition(-0.50);
            sleep(350);
            launchServo.setPosition(0.5);
            sleep(300);
            launchServo.setPosition(-0.50);
            sleep(350);
            launchServo.setPosition(0.5);
            sleep(25);
            launchMotor.setVelocity(0);
            sleep(100);
            encoderTurn(0.2, 1, 490, 490);
            sleep(300);
            intakeMotor.setPower(1);
            encoderForward(0.2, 500);
            sleep(100);
            encoderBack(0.2, 100);
            intakeMotor.setPower(1);
            sleep(1500);
            encoderTurn(0.2, -1, 415, 415);
            sleep(300);
            launchMotor.setVelocity(-2500);
            sleep(1000);
            launchServo.setPosition(-0.50);
            sleep(400);
            launchServo.setPosition(0.5);
            launchMotor.setVelocity(0);
            encoderTurn(0.2, -1, 1150, 1150);
            sleep(100);
            encoderForward(0.4, 600);
            armMotor.setPower(-0.8);
            sleep(1000);
            wobblerServo.setPosition(1);
            sleep(50);
            armMotor.setPower(0.3);
            sleep(50);
            encoderBack(0.5, 100);

        }
        if (numberOfRings == 4)
        {
            encoderBack(0.2, 375);
            sleep(300);
            encoderTurn(0.2, 1, 250, 250);
            sleep(300 );
            encoderBack(0.2, 620);
            sleep(300);
            encoderTurn(0.2, -1, 290, 290);
            sleep(300);
            encoderBack(0.2, 155);
            sleep(300);
            encoderTurn(0.2, -1, 200, 200);
            sleep(300);
            launchMotor.setVelocity(-2500);
            sleep(1000);
            intakeMotor.setPower(-0.5);
            launchServo.setPosition(-0.50);
            sleep(350);
            launchServo.setPosition(0.5);
            sleep(300);
            launchServo.setPosition(-0.50);
            sleep(350);
            launchServo.setPosition(0.5);
            sleep(300);
            launchServo.setPosition(-0.50);
            sleep(350);
            launchServo.setPosition(0.5);
            sleep(25);
            launchMotor.setVelocity(0);
            sleep(100);
            encoderTurn(0.2, -1, 1030, 1030);
            sleep(300);
            encoderForward(0.4, 1100);
            armMotor.setPower(-0.8);
            sleep(1000);
            wobblerServo.setPosition(1);
            sleep(50);
            armMotor.setPower(0.3);
            sleep(50);
            encoderBack(0.5, 450);
            sleep(1000);
            armMotor.setPower(-0.8);
            sleep(1000);
            armMotor.setPower(0);
        }

        }




    private int lookToFindRings() {
        int numberOfRings = 0;
        if (tfod != null) {
            long endTime = new Date().getTime() + 3000;

            while (numberOfRings == 0 && new Date().getTime() < endTime) {
                // getUpdatedRecognitions() will return null if no new information is available since
                // the last time that call was made.
                List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                if (updatedRecognitions != null) {
                    telemetry.addData("# Object Detected", updatedRecognitions.size());

                    // step through the list of recognitions and display boundary info.
                    int i = 0;
                    for (Recognition recognition : updatedRecognitions) {
                        String label = recognition.getLabel();
                        if (label.equals("Quad")) {
                            numberOfRings = 4;
                        } else if (label.equals("Single")) {
                            numberOfRings = 1;
                        }
                        telemetry.addData(String.format("label (%d)", i), recognition.getLabel());
                        telemetry.addData(String.format("  left,top (%d)", i), "%.03f , %.03f",
                                recognition.getLeft(), recognition.getTop());
                        telemetry.addData(String.format("  right,bottom (%d)", i), "%.03f , %.03f",
                                recognition.getRight(), recognition.getBottom());
                    }
                    telemetry.update();
                }
            }
        }
        return numberOfRings;
    }
    private void moveWobbler(double position) {
        wobblerServo.setPosition(position);
        sleep(500);
    }
    private void encoderBack(double speed, int ticks) {

        stopAndResetEncoder();

        runUsingEncoder();

        leftFrontDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBackDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightFrontDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightBackDrive.setDirection(DcMotorSimple.Direction.FORWARD);

        leftFrontDrive.setTargetPosition(ticks);
        rightFrontDrive.setTargetPosition(ticks);
        leftBackDrive.setTargetPosition(ticks);
        rightBackDrive.setTargetPosition(ticks);

        runToPosition();

        leftFrontDrive.setPower(Math.abs(speed));
        leftBackDrive.setPower(Math.abs(speed));
        rightBackDrive.setPower(Math.abs(speed));
        rightFrontDrive.setPower(Math.abs(speed));

        while (opModeIsActive() &&
                //           (runtime.seconds() < timeout) &&
                (leftFrontDrive.isBusy() && rightFrontDrive.isBusy() && leftBackDrive.isBusy() && rightBackDrive.isBusy()
                )
                && leftFrontDrive.getCurrentPosition() < ticks) {

            // Display it for the driver.
            telemetry.addData("LFT, RFT", "Running to %7d :%7d", ticks, ticks);
            telemetry.addData("LFP, RFP", "Running at %7d :%7d",
                    leftFrontDrive.getCurrentPosition(),
                    rightFrontDrive.getCurrentPosition());

            telemetry.addData("LBT. RBT", "Running to %7d :%7d", ticks, ticks);
            telemetry.addData("LBP, RBP", "Running at %7d :%7d",
                    leftBackDrive.getCurrentPosition(),
                    rightBackDrive.getCurrentPosition());
            telemetry.update();
        }

        stopDriveBase();
        runUsingEncoder();
/*
        leftFrontDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        leftBackDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightFrontDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightBackDrive.setDirection(DcMotorSimple.Direction.REVERSE);
*/
    }
    private void encoderForward(double speed, int ticks) {
        stopAndResetEncoder();
        runUsingEncoder();

        leftFrontDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        leftBackDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightFrontDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightBackDrive.setDirection(DcMotorSimple.Direction.REVERSE);

        int newLeftFrontTarget;
        int newRightFrontTarget;
        int newLeftBackTarget;
        int newRightBackTarget;

        // Ensure that the opmode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller
            //new target for the front wheels
            //newLeftFrontTarget = (int)(leftTicks * COUNTS_PER_INCH);
            //newRightFrontTarget = robot.rightFrontMotor.getCurrentPosition() + (int)(rightTicks * COUNTS_PER_INCH);
            newLeftFrontTarget = ticks;
            newRightFrontTarget = ticks;

            //new target for the back wheels
            //newLeftBackTarget = robot.leftBackDrive.getCurrentPosition() + (int)(leftInch * COUNTS_PER_INCH);
            //newRightBackTarget = robot.rightBackMotor.getCurrentPosition() + (int)(rightInch * COUNTS_PER_INCH);
            newLeftBackTarget = ticks;
            newRightBackTarget = ticks;

            //set target position for front wheels
            leftFrontDrive.setTargetPosition(newLeftFrontTarget);
            rightFrontDrive.setTargetPosition(newRightFrontTarget);

            //set target position for back wheels
            leftBackDrive.setTargetPosition(newLeftBackTarget);
            rightBackDrive.setTargetPosition(newRightBackTarget);

            runToPosition();

            leftFrontDrive.setPower(speed);
            leftBackDrive.setPower(speed);
            rightBackDrive.setPower(speed);
            rightFrontDrive.setPower(speed);

            while (opModeIsActive() &&
                    //           (runtime.seconds() < timeout) &&
                    (leftFrontDrive.isBusy() && rightFrontDrive.isBusy() &&
                            leftBackDrive.isBusy() && rightBackDrive.isBusy()
                    )
                    && leftFrontDrive.getCurrentPosition() < ticks) {

                // Display it for the driver.
                telemetry.addData("LFT, RFT", "Running to %7d :%7d", newLeftFrontTarget, newRightFrontTarget);
                telemetry.addData("LFP, RFP", "Running at %7d :%7d",
                        leftFrontDrive.getCurrentPosition(),
                        rightFrontDrive.getCurrentPosition());

                telemetry.addData("LBT. RBT", "Running to %7d :%7d", newLeftBackTarget, newRightBackTarget);
                telemetry.addData("LBP, RBP", "Running at %7d :%7d",
                        leftBackDrive.getCurrentPosition(),
                        rightBackDrive.getCurrentPosition());
                telemetry.update();
            }

            stopDriveBase();
            runUsingEncoder();
        }

    }
    private void encoderTurn(double speed, int direction, int leftTicks, int rightTicks) {
        stopAndResetEncoder();
        runUsingEncoder();

        if (opModeIsActive()) {
            int leftF = leftFrontDrive.getCurrentPosition() + leftTicks;
            int leftB = leftBackDrive.getCurrentPosition() + leftTicks;
            int rightF = rightFrontDrive.getCurrentPosition() + rightTicks;
            int rightB = rightBackDrive.getCurrentPosition() + rightTicks;

            //if intent is left turn
            if (direction == -1) {
                leftFrontDrive.setTargetPosition(leftF);
                leftBackDrive.setTargetPosition(leftB);
                rightFrontDrive.setTargetPosition(-rightF);
                rightBackDrive.setTargetPosition(-rightB);
            }
            //if intent is right turn
            else if (direction == 1) {
                leftFrontDrive.setTargetPosition(-leftF);
                leftBackDrive.setTargetPosition(-leftB);
                rightFrontDrive.setTargetPosition(rightF);
                rightBackDrive.setTargetPosition(rightB);
            }

            runToPosition();

            if (direction == -1) {
                leftFrontDrive.setPower(speed);
                leftBackDrive.setPower(speed);
                rightFrontDrive.setPower(speed);
                rightBackDrive.setPower(speed);
            } if (direction == 1) {
                leftFrontDrive.setPower(speed);
                leftBackDrive.setPower(speed);
                rightFrontDrive.setPower(speed);
                rightBackDrive.setPower(speed);
            }

            while (opModeIsActive() &&
                    //           (runtime.seconds() < timeout) &&
                    (leftFrontDrive.isBusy() && rightFrontDrive.isBusy() &&
                            leftBackDrive.isBusy() && rightBackDrive.isBusy()
                    )
                    && leftFrontDrive.getCurrentPosition() < leftTicks) {

                // Display it for the driver.
//                telemetry.addData("LFT, RFT", "Running to %7d :%7d", leftF, rightF);
//                telemetry.addData("LFP, RFP", "Running at %7d :%7d",
//                        robot.leftFrontDrive.getCurrentPosition(),
//                        robot.rightFrontDrive.getCurrentPosition());
//
//                telemetry.addData("LBT. RBT", "Running to %7d :%7d", leftB, rightB);
//                telemetry.addData("LBP, RBP", "Running at %7d :%7d",
//                        robot.leftBackDrive.getCurrentPosition(),
//                        robot.rightBackDrive.getCurrentPosition());
                // telemetry.update();
            }

            stopDriveBase();
        }
    }
    private void encoderStrafe(double speed, int direction, int ticks) {
        stopAndResetEncoder();
        runUsingEncoder();

        int leftF;
        int leftB;
        int rightF;
        int rightB;

        // Ensure that the opmode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller
            //new target for the front wheels
            //leftF = robot.leftFrontMotor.getCurrentPosition() + (int)(inch * COUNTS_PER_INCH);
            //rightF = robot.rightFrontMotor.getCurrentPosition() + (int)(inch * COUNTS_PER_INCH);
            leftF = leftFrontDrive.getCurrentPosition() + ticks;
            rightF = rightFrontDrive.getCurrentPosition() + ticks;

            //new target for the back wheels
            //leftB = robot.leftBackDrive.getCurrentPosition() + (int)(inch * COUNTS_PER_INCH);
            //rightB = robot.rightBackMotor.getCurrentPosition() + (int)(inch * COUNTS_PER_INCH);
            leftB = leftBackDrive.getCurrentPosition() + ticks;
            rightB = rightBackDrive.getCurrentPosition() + ticks;

            //if intent is to drive right
            if (direction == -1) {
                //set target position for front wheels
                leftFrontDrive.setTargetPosition(-leftF);
                rightFrontDrive.setTargetPosition(rightF);

                //set target position for back wheels
                leftBackDrive.setTargetPosition(leftB);
                rightBackDrive.setTargetPosition(-rightB);
            }

            //if intent is to drive left
            else if (direction == 1) {
                //set target position for front wheels
                leftFrontDrive.setTargetPosition(leftF);
                rightFrontDrive.setTargetPosition(-rightF);

                //set target position for back wheels
                leftBackDrive.setTargetPosition(-leftB);
                rightBackDrive.setTargetPosition(rightB);
            }

            runToPosition();

            if (direction == -1) {
                leftFrontDrive.setPower(-speed);
                leftBackDrive.setPower(speed);
                rightFrontDrive.setPower(speed);
                rightBackDrive.setPower(-speed);
            } else if (direction == 1) {
                leftFrontDrive.setPower(speed);
                leftBackDrive.setPower(-speed);
                rightFrontDrive.setPower(-speed);
                rightBackDrive.setPower(speed);
            }

            while (opModeIsActive() &&
                    //(runtime.seconds() < time) &&
                    (leftFrontDrive.isBusy() && rightFrontDrive.isBusy()
                            && leftBackDrive.isBusy() && rightBackDrive.isBusy())) {

                // Display it for the driver.
                telemetry.addData("Path1", "Running to %7d :%7d", leftF, rightF);
                telemetry.addData("Path2", "Running at %7d :%7d",
                        leftFrontDrive.getCurrentPosition(),
                        rightFrontDrive.getCurrentPosition());

                telemetry.addData("Path3", "Running to %7d :%7d", leftB, rightB);
                telemetry.addData("Path4", "Running at %7d :%7d",
                        leftBackDrive.getCurrentPosition(),
                        rightBackDrive.getCurrentPosition());
                telemetry.update();
            }

            stopDriveBase();
        }

    }

    //BASIC ENCODER METHODS
    private void stopAndResetEncoder() {
        leftFrontDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightFrontDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftBackDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightBackDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    }
    private void runUsingEncoder() {
        leftFrontDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightFrontDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftBackDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightBackDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    }
    private void stopDriveBase(){
        leftFrontDrive.setPower(0);
        rightFrontDrive.setPower(0);
        leftBackDrive.setPower(0);
        rightBackDrive.setPower(0);
    }
    private void runToPosition () {
        leftFrontDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightFrontDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftBackDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightBackDrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);

    }

    private void driveit(double leftfrontpower, double leftbackpower,
                         double rightfrontpower, double rightbackpower, long sleepTime) {
        if (opModeIsActive()) {

            leftFrontDrive.setPower(leftfrontpower);
            leftBackDrive.setPower(leftbackpower);
            rightFrontDrive.setPower(rightfrontpower);
            rightBackDrive.setPower(rightbackpower);

            telemetry.addData(String.format( "found %d rings Driving for %d ",numberOfRings, sleepTime), " (%.03f , %.03f, %.03f , %.03f)",
                    leftfrontpower, rightfrontpower, leftbackpower, rightbackpower);
            telemetry.update();

            sleep(sleepTime);        // wait for 2 seconds.

            // set motor power to zero to stop motors.

//        leftFrontDrive.setPower(0.0);
//        leftBackeDrive.setPower(0.0);
//        rightFrontDrive.setPower(0.0);
//        rightBackeDrive.setPower(0.0);
        }
    }

    /**
     * Initialize the Vuforia localization engine.
     */
    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection = CameraDirection.BACK;

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);

        // Loading trackables is not necessary for the TensorFlow Object Detection engine.
    }

    /**
     * Initialize the TensorFlow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfodParameters.minResultConfidence = 0.8f;
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_FIRST_ELEMENT, LABEL_SECOND_ELEMENT);
    }
}
